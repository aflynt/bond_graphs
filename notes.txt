t forbes brown
✓
✓
✗

[✓] SE
[✓] I
[✓] SF
[✓] R
[✓] C

[✓] TF
[✓] 0J
[✓] 1J


single-port elements

IF name[0] == 'S':

# SE  ___|
  e = E

# SF |___
  f = F

# R   ___|
  e = R f    (PREFERRED)
# R  |___
  f = e / R

# C   ___|
  e = q / c  (PREFERRED)
# C  |___
  f = qdot

# I   ___|
  e = pdot
# I  |___
  f = p / I  (PREFERRED)

# |_1_ TF |_2_
    e1 = m e2
  m f1 = f2

#  _1_| TF _2_|
    f1 = f2 / m
    e1 / m = e2

# _1_| 0 _2_|
       |
       3
       |
       _
  e2 = e1
  e3 = e1
  f1 = -(f2+f3)

# _1_| 1 _2_|
       |
       3
       |
       _
  f2 = f1
  f3 = f1
  e1 = -(e2+e3)


#  node-left: SE
#  node-right: 1J-5
#  stroke-side: Right

BOND
NL -- N  -- NR

if (CS:R)
  NL  -- N  -- |NR
else
  NL| -- N  --  NR

if (POS-E: L)
  NL /-- N  -- NR
else
  NL  -- N  --\NR


bond (node-left, node-right, stroke-dir, pos-e-dir, num)
bond( 14 ,   'SE', '1J-5 '  , 'R' , 'L')
bond( 15 ,    'I', '1J-5 '  , 'L' , 'L')
bond( 14 , '1J-5', 'TF.Ab'  , 'L' , 'L')
bond( 13 ,'TF.Ab', '1J-4 '  , 'L' , 'L')
bond( 12 ,   'Rb', '1J-4 '  , 'R' , 'L')

e_dict = {
  1: ...
  2: ...
  3: ...
  4: ...
  5: ...
  6: ...
  7: ...
  8: ...
}

f_dict = {
  1: ...
  2: ...
  3: ...
  4: ...
  5: ...
  6: ...
  7: ...
  8: ...
}

# simple model system
01234567890123456789012345
[NodeL] |<__nn__>| [NodeR]
[SE   ]   __ 1__>| [1J   ]
[I2   ] |<__ 2__   [1J   ]
[C3   ]  <__ 3__ | [1J   ]
[1J   ] | __ 4__>  [R    ]
[1J   ] | __ 5__>  [TF_m ]
[TF_m ] | __ 6__>  [0J   ]
[0J   ] | __ 7__>  [C7   ]
[0J   ]   __ 8__>| [I8   ]


# 01234567890123456789012345
# [NodeL] |<__nn__>| [NodeR]
# [1J-5 ] | __17__>  [TF.an]
# [TF.an] | __18__>  [1J-6 ]
# [Ra   ]  <__19__ | [1J-6 ]
# [1J-6 ] | __20__>  [Rv70 ]
# [1J-6 ] | __21__>  [Rv20 ]
# [1J-6 ] | __22__>  [0J-1 ]
#
#  12345              12345
# [SE   ]  <__16__ | [1J-5 ]
# [1J-4 ] |<__11__   [0J-1 ]
  [0J-1 ] | __10__>  [1J-3 ]
  [Rv40 ]  <__ 9__ | [1J-3 ]
# [1J-3 ] | __ 8__>  [Rl40 ]
# [1J-3 ] | __ 7__>  [0J-2 ]
# [1J-2 ] | __ 6__>  [Cacc1]
# [Rp2  ]  <__ 5__ | [1J-2 ]
# [0J-2 ] | __ 4__>  [1J-2 ]
# [0J-2 ]   __ 3__>| [1J-1 ]
# [1J-1 ]   __ 2__>| [Rp3  ]
# [1J-1 ] | __ 1__>  [Cacc2]
#
#
#
# bonds.append(bond.from_bond_string('[1J-5 ] | __17__>  [TF.an]' )
# bonds.append(bond.from_bond_string('[TF.an] | __18__>  [1J-6 ]' )
# bonds.append(bond.from_bond_string('[Ra   ]  <__19__ | [1J-6 ]' )
# bonds.append(bond.from_bond_string('[1J-6 ] | __20__>  [Rv70 ]' )
# bonds.append(bond.from_bond_string('[1J-6 ] | __21__>  [Rv20 ]' )
# bonds.append(bond.from_bond_string('[1J-6 ] | __22__>  [0J-1 ]' )
#
# bonds.append(bond.from_bond_string('[SE   ]  <__16__ | [1J-5 ]' )
# bonds.append(bond.from_bond_string('[1J-4 ] |<__11__   [0J-1 ]' )
# bonds.append(bond.from_bond_string('[0J-1 ] | __10__>  [1J-3 ]' )
# bonds.append(bond.from_bond_string('[Rv40 ]  <__ 9__ | [1J-3 ]' )
# bonds.append(bond.from_bond_string('[1J-3 ] | __ 8__>  [Rl40 ]' )
# bonds.append(bond.from_bond_string('[1J-3 ] | __ 7__>  [0J-2 ]' )
# bonds.append(bond.from_bond_string('[1J-2 ] | __ 6__>  [Cacc1]' )
# bonds.append(bond.from_bond_string('[Rp2  ]  <__ 5__ | [1J-2 ]' )
# bonds.append(bond.from_bond_string('[0J-2 ] | __ 4__>  [1J-2 ]' )
# bonds.append(bond.from_bond_string('[0J-2 ]   __ 3__>| [1J-1 ]' )
# bonds.append(bond.from_bond_string('[1J-1 ]   __ 2__>| [Rp3  ]' )
# bonds.append(bond.from_bond_string('[1J-1 ] | __ 1__>  [Cacc2]' )

TFE system
system([bond(15,"I","1J-5","L", "L"),
bond(14,"1J-5","TF.Ab","L", "L"),
bond(13,"TF.Ab","1J-4","L", "L"),
bond(12,"Rb","1J-4","R", "L"),
bond(16,"SE","1J-5","R", "L"),
bond(11,"1J-4","0J-1","L", "L"),
bond(10,"0J-1","1J-3","L", "R"),
bond(9,"Rv40","1J-3","R", "L"),
bond(8,"1J-3","Rl40","L", "R"),
bond(7,"1J-3","0J-2","L", "R"),
bond(6,"1J-2","Cacc1","L", "R"),
bond(5,"Rp2","1J-2","R", "L"),
bond(4,"0J-2","1J-2","L", "R"),
bond(3,"0J-2","1J-1","R", "R"),
bond(2,"1J-1","Rp3","R", "R"),
bond(1,"1J-1","Cacc2","L", "R"),
bond(17,"1J-5","TF.an","L", "R"),
bond(18,"TF.an","1J-6","L", "R"),
bond(19,"Ra","1J-6","R", "L"),
bond(20,"1J-6","Rv70","L", "R"),
bond(21,"1J-6","Rv20","L", "R"),
bond(22,"1J-6","0J-1","L", "R"),
])

# system
  * add_bond(bond)
  * get_elem_bonds(elem)
  * get_nbrs(self,elem)
  * get_bond(self,e1,e2)
  * get_bond_bynum(self,num)
  * get_bond_num(self,e1,e2)
  * get_single_ports(self)
  * get_two_ports(self)

# bond
  props: [nls, nrs, num, e, f, csd, ped]
  *  set_e(self, e):
  *  set_f(self, f):
  *  print_rev(self):
  *  is_ped_into_elem(self,elem_name)

# element
  props: [etype, name, ports,value]
  * get_value

# elem_TF
  props: [value, p1, p2]
  p1 = {e,f,b}
  p2 = {e,f,b}

# elem_0J
  props: [bonds, sb]
  *  print_bonds()
  *  get_sb()
  *  set_e()
  *  set_f()
  *  sumfs(bcurr)

# elem_1J
  props: [bonds, sb]
  *  print_bonds()
  *  get_sb()
  *  set_f()
  *  set_e()
  *  sumes(bcurr)

